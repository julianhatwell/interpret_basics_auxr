}
one_hots
})
)
names(dframe) <- unlist(output_names)
cbind(dframe, numerics)
}
homedir <- "c:\\Dev\\Study\\Python\\interpret_basics\\"
print("Common setup for nursery data")
nursery <- read.csv(paste0(homedir, "nursery.csv")
, col.names = c('parents'
, 'has_nurs'
, 'form'
, 'children'
, 'housing'
, 'finance'
, 'social'
, 'health'
, 'decision')
)
print("Removing minority class")
nursery <- nursery[nursery$decision != "recommend", ]
nursery$decision <- factor(as.character(nursery$decision))
nursery_enc <- nursery %>% select(-decision)
nursery_enc <- onehot_encode(nursery_enc)
list()
length(list())
# utility code
onehot_encode <- function(dframe) {
input_names <- names(dframe)
output_names <- list()
numerics <- list()
for (name in input_names) {
if (class(dframe[[name]]) != "numeric") {
output_names[[name]] <- paste(name, unique(dframe[, name]), sep = "_")
} else {
numerics[[name]] <- dframe[[name]]
dframe[[name]] <- NULL
}
}
dframe <- as.data.frame(
sapply(dframe, function(x) {
vals <- unique(x)
one_hots <- matrix(nrow = nrow(dframe)
, ncol = length(vals))
for (i in seq_along(vals)) {
one_hots[, i] <- x == vals[i]
}
one_hots
})
)
names(dframe) <- unlist(output_names)
# add any untreated numerics back to the end of the new frame
if(length(numerics) > 0) dframe <- cbind(dframe, numerics)
dframe
}
homedir <- "c:\\Dev\\Study\\Python\\interpret_basics\\"
print("Common setup for nursery data")
nursery <- read.csv(paste0(homedir, "nursery.csv")
, col.names = c('parents'
, 'has_nurs'
, 'form'
, 'children'
, 'housing'
, 'finance'
, 'social'
, 'health'
, 'decision')
)
print("Removing minority class")
nursery <- nursery[nursery$decision != "recommend", ]
nursery$decision <- factor(as.character(nursery$decision))
nursery_enc <- nursery %>% select(-decision)
nursery_enc <- onehot_encode(nursery_enc)
# add the unencoded class col back
nursery_enc$decision <- nursery$decision
rm(list = ls())
library(dplyr)
library(xlsx)
# utility code
onehot_encode <- function(dframe) {
input_names <- names(dframe)
output_names <- list()
numerics <- list()
for (name in input_names) {
if (class(dframe[[name]]) != "numeric") {
output_names[[name]] <- paste(name, unique(dframe[, name]), sep = "_")
} else {
numerics[[name]] <- dframe[[name]]
dframe[[name]] <- NULL
}
}
dframe <- as.data.frame(
sapply(dframe, function(x) {
vals <- unique(x)
one_hots <- matrix(nrow = nrow(dframe)
, ncol = length(vals))
for (i in seq_along(vals)) {
one_hots[, i] <- x == vals[i]
}
one_hots
})
)
names(dframe) <- unlist(output_names)
# add any untreated numerics back to the end of the new frame
if(length(numerics) > 0) dframe <- cbind(dframe, numerics)
dframe
}
homedir <- "c:\\Dev\\Study\\Python\\interpret_basics\\"
print("Common setup for nursery data")
nursery <- read.csv(paste0(homedir, "nursery.csv")
, col.names = c('parents'
, 'has_nurs'
, 'form'
, 'children'
, 'housing'
, 'finance'
, 'social'
, 'health'
, 'decision')
)
print("Removing minority class")
nursery <- nursery[nursery$decision != "recommend", ]
nursery$decision <- factor(as.character(nursery$decision))
nursery_enc <- nursery %>% select(-decision)
nursery_enc <- onehot_encode(nursery_enc)
# add the unencoded class col back
nursery_enc$decision <- nursery$decision
print("nursery: basic dataset")
print("nursery_enc: one hot encoded dataset")
# german
print("Common setup for german data")
target_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data"
german <- read.csv(target_url
, sep = ' '
, header = FALSE
, col.names = c('chk'
, 'dur'
, 'crhis'
, 'pps'
, 'amt'
, 'svng'
, 'emp'
, 'rate'
, 'pers'
, 'debt'
, 'res'
, 'prop'
, 'age'
, 'plans'
, 'hous'
, 'creds'
, 'job'
, 'deps'
, 'tel'
, 'foreign'
, 'rating')
)
german$rating <- ifelse(german$rating == 1, 'good', 'bad')
german_enc <- german %>% select(-rating)
german_enc <- onehot_encode(german_enc)
german_enc$rating <- german$rating
print("nursery: basic dataset")
summary(german)
sapply(german, class)
# utility code
onehot_encode <- function(dframe) {
input_names <- names(dframe)
output_names <- list()
numerics <- list()
for (name in input_names) {
if (class(dframe[[name]]) %in% c("numeric", "integer") ) {
numerics[[name]] <- dframe[[name]]
dframe[[name]] <- NULL
} else {
output_names[[name]] <- paste(name, unique(dframe[, name]), sep = "_")
}
}
dframe <- as.data.frame(
sapply(dframe, function(x) {
vals <- unique(x)
one_hots <- matrix(nrow = nrow(dframe)
, ncol = length(vals))
for (i in seq_along(vals)) {
one_hots[, i] <- x == vals[i]
}
one_hots
})
)
names(dframe) <- unlist(output_names)
# add any untreated numerics back to the end of the new frame
if(length(numerics) > 0) dframe <- cbind(dframe, numerics)
dframe
}
homedir <- "c:\\Dev\\Study\\Python\\interpret_basics\\"
print("Common setup for nursery data")
nursery <- read.csv(paste0(homedir, "nursery.csv")
, col.names = c('parents'
, 'has_nurs'
, 'form'
, 'children'
, 'housing'
, 'finance'
, 'social'
, 'health'
, 'decision')
)
print("Removing minority class")
nursery <- nursery[nursery$decision != "recommend", ]
nursery$decision <- factor(as.character(nursery$decision))
nursery_enc <- nursery %>% select(-decision)
nursery_enc <- onehot_encode(nursery_enc)
# add the unencoded class col back
nursery_enc$decision <- nursery$decision
print("nursery: basic dataset")
print("nursery_enc: one hot encoded dataset")
# german
print("Common setup for german data")
target_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data"
german <- read.csv(target_url
, sep = ' '
, header = FALSE
, col.names = c('chk'
, 'dur'
, 'crhis'
, 'pps'
, 'amt'
, 'svng'
, 'emp'
, 'rate'
, 'pers'
, 'debt'
, 'res'
, 'prop'
, 'age'
, 'plans'
, 'hous'
, 'creds'
, 'job'
, 'deps'
, 'tel'
, 'foreign'
, 'rating')
)
german$rating <- ifelse(german$rating == 1, 'good', 'bad')
german_enc <- german %>% select(-rating)
german_enc <- onehot_encode(german_enc)
german_enc$rating <- german$rating
print("nursery: basic dataset")
print("nursery_enc: one hot encoded dataset")
# adult
print("Common setup for adult data")
target_url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
target_url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test"
adult <- read.csv(target_url
, sep = ','
, header = FALSE
, col.names = c('age'
, 'workclass'
, 'fnlwgt'
, 'education'
, 'educationnum'
, 'maritalstatus'
, 'occupation'
, 'relationship'
, 'race'
, 'sex'
, 'capitalgain'
, 'capitalloss'
, 'hoursperweek'
, 'nativecountry'
, 'income'))
adult <- rbind(adult, read.csv(target_url2
, sep = ','
, skip = 1
, header = FALSE
, col.names = c('age'
, 'workclass'
, 'fnlwgt'
, 'education'
, 'educationnum'
, 'maritalstatus'
, 'occupation'
, 'relationship'
, 'race'
, 'sex'
, 'capitalgain'
, 'capitalloss'
, 'hoursperweek'
, 'nativecountry'
, 'income')))
income <- as.character(adult$income)
income <- sub(".", "", income)
adult$income <- factor(income)
adult_enc <- adult %>% select(-income)
adult_enc <- onehot_encode(adult_enc)
adult_enc$income <- adult$income
# car
print("Common setup for car data")
target_url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data"
car <- read.csv(target_url
, sep = ','
, header = FALSE
, col.names = c('buying'
, 'maint'
, 'doors'
, 'persons'
, 'lug_boot'
, 'safety'
, 'acceptability'))
car_enc <- car %>% select(-acceptability)
car_enc <- onehot_encode(car_enc)
car_enc$income <- car$income
# cardiotrography
print("Common setup for cardiotography data")
cardiotography <- read.xlsx(paste0(homedir, "CTG.xlsx")
, sheetIndex = 1
, header = FALSE
, colClasses = c(rep("numeric", 21), "character", "numeric"))
names(cardiotography) <- c('LB'
, 'AC'
, 'FM'
, 'UC'
, 'DL'
, 'DS'
, 'DP'
, 'ASTV'
, 'MSTV'
, 'ALTV'
, 'MLTV'
, 'Width'
, 'Min'
, 'Max'
, 'Nmax'
, 'Nzeros'
, 'Mode'
, 'Mean'
, 'Median'
, 'Variance'
, 'Tendency'
, 'CLASS'
, 'NSP')
NSP <- rep("N", nrow(cardiotography))
NSP[cardiotography$NSP == 2] <- "S"
NSP[cardiotography$NSP == 3] <- "P"
cardiotography$NSP <- factor(NSP)
cardiotography_enc <- cardiotography %>% select(-NSP) # encode without the class column
cardiotography_enc <- onehot_encode(cardiotography_enc)
cardiotography_enc$NSP <- factor(NSP) # add back the class column
head(cardiotography)
class(cardiotography$CLASS)
library(vcd)
assocstats(NSP~CLASS, data=cardiotography)
assocstats(NSP~CLASS)
ftable(NSP~CLASS, data = cardiotography)
assocstats(ftable(NSP~CLASS, data = cardiotography))
mosaic(ftable(NSP~CLASS, data = cardiotography))
mosaic(ftable(NSP~CLASS, data = cardiotography), shade = TRUE)
cardiotography$CLASS <- NULL # alternative classification, highly associated with NSP
NSP <- rep("N", nrow(cardiotography))
NSP[cardiotography$NSP == 2] <- "S"
NSP[cardiotography$NSP == 3] <- "P"
cardiotography$NSP <- factor(NSP)
cardiotography_enc <- cardiotography %>% select(-NSP) # encode without the class column
cardiotography_enc <- onehot_encode(cardiotography_enc)
library(dplyr)
library(xlsx)
# utility code
onehot_encode <- function(dframe) {
input_names <- names(dframe)
output_names <- list()
numerics <- list()
for (name in input_names) {
if (class(dframe[[name]]) %in% c("numeric", "integer") ) {
numerics[[name]] <- dframe[[name]]
dframe[[name]] <- NULL
} else {
output_names[[name]] <- paste(name, unique(dframe[, name]), sep = "_")
}
}
dframe <- as.data.frame(
sapply(dframe, function(x) {
vals <- unique(x)
one_hots <- matrix(nrow = nrow(dframe)
, ncol = length(vals))
for (i in seq_along(vals)) {
one_hots[, i] <- x == vals[i]
}
one_hots
})
)
names(dframe) <- unlist(output_names)
# add any untreated numerics back to the end of the new frame
if(length(numerics) > 0) dframe <- cbind(dframe, numerics)
dframe
}
homedir <- "c:\\Dev\\Study\\Python\\interpret_basics\\"
# cardiotrography
print("Common setup for cardiotography data")
cardiotography <- read.xlsx(paste0(homedir, "CTG.xlsx")
, sheetIndex = 1
, header = FALSE
, colClasses = c(rep("numeric", 21), "character", "numeric"))
names(cardiotography) <- c('LB'
, 'AC'
, 'FM'
, 'UC'
, 'DL'
, 'DS'
, 'DP'
, 'ASTV'
, 'MSTV'
, 'ALTV'
, 'MLTV'
, 'Width'
, 'Min'
, 'Max'
, 'Nmax'
, 'Nzeros'
, 'Mode'
, 'Mean'
, 'Median'
, 'Variance'
, 'Tendency'
, 'CLASS'
, 'NSP')
cardiotography$CLASS <- NULL # alternative classification, highly associated with NSP
NSP <- rep("N", nrow(cardiotography))
NSP[cardiotography$NSP == 2] <- "S"
NSP[cardiotography$NSP == 3] <- "P"
cardiotography$NSP <- factor(NSP)
cardiotography_enc <- cardiotography %>% select(-NSP) # encode without the class column
cardiotography_enc <- onehot_encode(cardiotography_enc)
# utility code
onehot_encode <- function(dframe) {
input_names <- names(dframe)
output_names <- list()
numerics <- list()
for (name in input_names) {
if (class(dframe[[name]]) %in% c("numeric", "integer") ) {
numerics[[name]] <- dframe[[name]]
dframe[[name]] <- NULL
} else {
output_names[[name]] <- paste(name, unique(dframe[, name]), sep = "_")
}
}
dframe <- as.data.frame(
sapply(dframe, function(x) {
vals <- unique(x)
one_hots <- matrix(nrow = nrow(dframe)
, ncol = length(vals))
for (i in seq_along(vals)) {
one_hots[, i] <- x == vals[i]
}
one_hots
})
)
names(dframe) <- unlist(output_names)
# add any untreated numerics back to the end of the new frame
if(length(numerics) > 0) { # there are some numeric columns
if (length(dframe) > 0) { # there are also some non-numeric columns
dframe <- cbind(dframe, numerics)
} else {
dframe <- numerics # there were no non-numeric columns
}
}
dframe
}
cardiotography_enc <- cardiotography %>% select(-NSP) # encode without the class column
cardiotography_enc <- onehot_encode(cardiotography_enc)
cardiotography_enc$NSP <- factor(NSP) # add back the class column
dframe <- as.data.frame(numerics) # there were no non-numeric columns
# utility code
onehot_encode <- function(dframe) {
input_names <- names(dframe)
output_names <- list()
numerics <- list()
for (name in input_names) {
if (class(dframe[[name]]) %in% c("numeric", "integer") ) {
numerics[[name]] <- dframe[[name]]
dframe[[name]] <- NULL
} else {
output_names[[name]] <- paste(name, unique(dframe[, name]), sep = "_")
}
}
dframe <- as.data.frame(
sapply(dframe, function(x) {
vals <- unique(x)
one_hots <- matrix(nrow = nrow(dframe)
, ncol = length(vals))
for (i in seq_along(vals)) {
one_hots[, i] <- x == vals[i]
}
one_hots
})
)
names(dframe) <- unlist(output_names)
# add any untreated numerics back to the end of the new frame
if(length(numerics) > 0) { # there are some numeric columns
if (length(dframe) > 0) { # there are also some non-numeric columns
dframe <- cbind(dframe, numerics)
} else {
dframe <- as.data.frame(numerics) # there were no non-numeric columns
}
}
dframe
}
cardiotography_enc <- cardiotography %>% select(-NSP) # encode without the class column
cardiotography_enc <- onehot_encode(cardiotography_enc)
cardiotography_enc$NSP <- factor(NSP) # add back the class column
head(cardiotography)
head(cardiotography_enc)
